// MAVILDA BOT - VERSI√ìN PROFESIONAL COMPLETA
const express = require("express");
const cors = require("cors");
const app = express();

app.use(express.json());
app.use(cors());

// Base de datos de sesiones en memoria
const sessions = {};

// An√°lisis inteligente de mensaje
function analyzeMessage(message) {
  const msgLower = message
    .toLowerCase()
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "");

  return {
    // Detecci√≥n de modelo
    model: msgLower.includes("t25")
      ? "T25P"
      : msgLower.includes("t50")
        ? "T50"
        : msgLower.includes("t70")
          ? "T70P"
          : msgLower.includes("t100")
            ? "T100"
            : msgLower.includes("mavic")
              ? "Mavic3M"
              : null,

    // Detecci√≥n de superficie
    surface: message.match(/(\d+)\s*(ha|hectarea)/i)?.[1],

    // Detecci√≥n de contacto
    phone: message.match(/[\d\s\-\+\(\)]{10,15}/)?.[0]?.replace(/\D/g, ""),
    email: message.match(/[^\s@]+@[^\s@]+\.[^\s@]+/)?.[0],

    // Detecci√≥n de intenci√≥n
    intent:
      msgLower.includes("precio") ||
      msgLower.includes("costo") ||
      msgLower.includes("cuanto") ||
      msgLower.includes("vale")
        ? "price"
        : msgLower.includes("demo") ||
            msgLower.includes("prueba") ||
            msgLower.includes("verlo")
          ? "demo"
          : msgLower.includes("financ") ||
              msgLower.includes("cuota") ||
              msgLower.includes("pago")
            ? "financing"
            : msgLower.includes("especific") ||
                msgLower.includes("tecnic") ||
                msgLower.includes("rendimiento")
              ? "specs"
              : msgLower.includes("compar") || msgLower.includes("diferencia")
                ? "compare"
                : "general",

    // Palabras clave del agro
    agroTerms: {
      hasLote: msgLower.includes("lote"),
      hasCampa√±a: msgLower.includes("campa√±a") || msgLower.includes("campana"),
      hasCultivo:
        msgLower.includes("soja") ||
        msgLower.includes("maiz") ||
        msgLower.includes("trigo"),
      hasFumigacion: msgLower.includes("fumig") || msgLower.includes("pulveri"),
      hasProblema:
        msgLower.includes("maleza") ||
        msgLower.includes("plaga") ||
        msgLower.includes("problem"),
    },
  };
}

// Obtener o crear sesi√≥n
function getSession(sessionId) {
  if (!sessions[sessionId]) {
    sessions[sessionId] = {
      id: sessionId,
      stage: "greeting",
      messages: 0,
      userName: null,
      userPhone: null,
      userEmail: null,
      modelInterest: null,
      surfaceHA: null,
      cultivos: null,
      challenges: [],
      captured: false,
      history: [],
      context: {},
    };
  }
  return sessions[sessionId];
}

// Generador de respuestas contextual
function generateResponse(session, analysis, message) {
  const { stage, userName, modelInterest, surfaceHA, messages } = session;
  const { intent, model, surface, phone, email, agroTerms } = analysis;

  // Actualizar datos de sesi√≥n si se detectaron
  if (model && !modelInterest) session.modelInterest = model;
  if (surface) session.surfaceHA = parseInt(surface);
  if (phone && !session.userPhone) session.userPhone = phone;
  if (email && !session.userEmail) session.userEmail = email;

  // ETAPA: SALUDO INICIAL
  if (messages === 1) {
    session.stage = "greeting";
    return (
      "¬°Hola! üëã Soy Mavilda de Seragro, especialista en drones agr√≠colas DJI.\n\n" +
      "Me encantar√≠a ayudarte a mejorar la eficiencia de tu campo.\n" +
      "¬øCon qui√©n tengo el gusto de hablar?"
    );
  }

  // CAPTURA DE NOMBRE
  if (messages === 2 && !userName && message.length < 30) {
    session.userName = message.trim();
    session.stage = "diagnosis";

    const respuestas = [
      `¬°Mucho gusto ${session.userName}! Contame, ¬øqu√© desaf√≠o ten√©s hoy en tu campo que te gustar√≠a resolver?`,
      `¬°Qu√© bueno conocerte ${session.userName}! ¬øEn qu√© te puedo ayudar con la tecnolog√≠a de drones?`,
      `¬°Hola ${session.userName}! Me alegra que te intereses por modernizar tu operaci√≥n. ¬øQu√© necesidad espec√≠fica ten√©s?`,
    ];
    return respuestas[Math.floor(Math.random() * respuestas.length)];
  }

  const name = userName || "che";

  // RESPUESTAS POR INTENCI√ìN
  switch (intent) {
    case "price":
      if (!modelInterest) {
        return (
          `${name}, para darte un precio exacto, ¬øqu√© modelo te interesa?\n\n` +
          `Te cuento las opciones:\n` +
          `‚Ä¢ T25P - Ideal para empezar (100-300 ha)\n` +
          `‚Ä¢ T50 - El m√°s equilibrado (300-500 ha)\n` +
          `‚Ä¢ T70P - Alta performance (500-800 ha)\n` +
          `‚Ä¢ T100 - M√°xima capacidad (+800 ha)\n` +
          `‚Ä¢ Mavic3M - Para mapeo y monitoreo`
        );
      }
      session.stage = "proposal";
      return "__NEEDS_SHEETS__";

    case "demo":
      session.stage = "capture";
      return (
        `¬°Excelente ${name}! Ver el drone en acci√≥n en tu propio campo es la mejor decisi√≥n.\n\n` +
        `Para coordinar la demo necesito:\n` +
        `üìç Ubicaci√≥n de tu campo\n` +
        `üìè ${surfaceHA ? `Superficie: ${surfaceHA} ha ‚úì` : "Superficie aproximada"}\n` +
        `üì± ${session.userPhone ? "Tel√©fono: ‚úì" : "Un tel√©fono de contacto"}\n\n` +
        `¬øMe pas√°s estos datos?`
      );

    case "specs":
      if (!modelInterest) {
        return `${name}, ¬øde qu√© modelo quer√©s conocer las especificaciones t√©cnicas?`;
      }
      return "__NEEDS_PINECONE__";

    case "financing":
      session.stage = "proposal";
      return (
        `${name}, tenemos excelentes opciones de financiaci√≥n:\n\n` +
        `üí≥ **Planes disponibles:**\n` +
        `‚Ä¢ Hasta 12 cuotas sin inter√©s con tarjetas bancarias\n` +
        `‚Ä¢ Leasing agr√≠cola a 24-36 meses\n` +
        `‚Ä¢ Financiaci√≥n directa adaptada a tu ciclo de cosecha\n` +
        `‚Ä¢ Posibilidad de pago en granos\n\n` +
        `¬øQu√© opci√≥n te resulta m√°s conveniente para tu operaci√≥n?`
      );

    case "compare":
      return (
        `${name}, cada modelo tiene sus ventajas seg√∫n tu necesidad:\n\n` +
        `**Para campos chicos-medianos (hasta 300 ha):**\n` +
        `‚Üí T25P: M√°s econ√≥mico, f√°cil de operar, ideal para empezar\n\n` +
        `**Para operaciones medianas (300-500 ha):**\n` +
        `‚Üí T50: Mejor relaci√≥n inversi√≥n/rendimiento\n\n` +
        `**Para grandes superficies (+500 ha):**\n` +
        `‚Üí T70P o T100: M√°xima eficiencia, menor costo por hect√°rea\n\n` +
        `¬øCu√°ntas hect√°reas trabaj√°s habitualmente?`
      );
  }

  // FLUJO CONVERSACIONAL NATURAL
  if (stage === "diagnosis" && !surfaceHA) {
    return (
      `${name}, para recomendarte la mejor opci√≥n, ¬øcu√°ntas hect√°reas necesit√°s cubrir ` +
      `en tu campa√±a t√≠pica? Tambi√©n contame qu√© cultivos trabaj√°s principalmente.`
    );
  }

  if (stage === "diagnosis" && surfaceHA && !modelInterest) {
    session.stage = "proposal";

    // Recomendaci√≥n inteligente basada en superficie
    let recomendacion = "";
    if (surfaceHA <= 300) {
      recomendacion =
        `Para tus ${surfaceHA} hect√°reas, el T25P es perfecto. ` +
        `Es el m√°s vendido para productores que arrancan con drones.\n\n` +
        `‚úÖ Ventajas para tu campo:\n` +
        `‚Ä¢ 25L de tanque, ideal para lotes medianos\n` +
        `‚Ä¢ F√°cil de operar, aprend√©s en un d√≠a\n` +
        `‚Ä¢ Retorno de inversi√≥n en 1-2 campa√±as`;
    } else if (surfaceHA <= 500) {
      recomendacion =
        `Con ${surfaceHA} hect√°reas, te recomiendo el T50.\n\n` +
        `‚úÖ Por qu√© es ideal para vos:\n` +
        `‚Ä¢ 50L de tanque, menos recargas\n` +
        `‚Ä¢ Cubre 40 ha/hora a full\n` +
        `‚Ä¢ El m√°s elegido por contratistas`;
    } else {
      recomendacion =
        `Para ${surfaceHA} hect√°reas necesit√°s alta capacidad.\n` +
        `Te recomiendo el T70P o T100.\n\n` +
        `‚úÖ Beneficios para operaciones grandes:\n` +
        `‚Ä¢ Hasta 42 ha/hora de rendimiento\n` +
        `‚Ä¢ Autonom√≠a para jornadas largas\n` +
        `‚Ä¢ Menor costo operativo por hect√°rea`;
    }

    return (
      recomendacion +
      `\n\n¬øTe gustar√≠a saber precios o prefer√≠s ver una demo primero?`
    );
  }

  // SOLICITUD NATURAL DE CONTACTO
  if (
    messages >= 5 &&
    !session.userPhone &&
    modelInterest &&
    intent !== "demo"
  ) {
    return (
      `${name}, te puedo mandar videos del ${modelInterest} trabajando en campos ` +
      `de la zona y un informe de rendimiento.\n\n` +
      `¬øMe pas√°s tu celu para envi√°rtelos por WhatsApp?`
    );
  }

  // RESPUESTA DEFAULT CONTEXTUAL
  if (modelInterest) {
    const opciones = [
      `¬øQu√© m√°s te gustar√≠a saber del ${modelInterest}?`,
      `El ${modelInterest} es excelente elecci√≥n. ¬øQuer√©s conocer precios o especificaciones?`,
      `¬øTe interesa ver el ${modelInterest} funcionando en tu campo?`,
    ];
    return opciones[Math.floor(Math.random() * opciones.length)];
  }

  return (
    `${name}, ¬øen qu√© m√°s te puedo ayudar? Puedo contarte sobre modelos, ` +
    `precios, financiaci√≥n o coordinar una demostraci√≥n en tu campo.`
  );
}

// ENDPOINT PRINCIPAL
app.post("/process", async (req, res) => {
  try {
    const { message, sessionId } = req.body;

    if (!message || !sessionId) {
      return res.status(400).json({ error: "Mensaje y sessionId requeridos" });
    }

    // Obtener sesi√≥n y analizar mensaje
    const session = getSession(sessionId);
    session.messages++;
    session.history.push({
      user: message,
      timestamp: new Date(),
      analysis: analyzeMessage(message),
    });

    const analysis = analyzeMessage(message);

    // Generar respuesta inteligente
    const response = generateResponse(session, analysis, message);

    // Verificar si tenemos lead completo
    const hasCompleteLead = !!(
      session.userName &&
      (session.userPhone || session.userEmail) &&
      session.modelInterest
    );

    if (hasCompleteLead && !session.captured) {
      session.captured = true;
    }

    // LOG PARA DEBUG
    console.log("üì• Recibido:", { message, sessionId });
    console.log("üß† An√°lisis:", analysis);
    console.log("üí¨ Respuesta:", response);
    console.log("üìä Sesi√≥n:", session);

    // Responder con toda la informaci√≥n necesaria para N8N
    res.json({
      response,
      session: {
        id: session.id,
        userName: session.userName,
        userPhone: session.userPhone,
        userEmail: session.userEmail,
        modelInterest: session.modelInterest,
        surfaceHA: session.surfaceHA,
        messages: session.messages,
        stage: session.stage,
      },
      needs: {
        sheets: response === "__NEEDS_SHEETS__",
        pinecone: response === "__NEEDS_PINECONE__",
        saveLead: hasCompleteLead && session.captured,
      },
      intent: analysis.intent,
      model: session.modelInterest,
    });
  } catch (error) {
    console.error("‚ùå Error:", error);
    res.status(500).json({
      error: "Error procesando mensaje",
      details: error.message,
    });
  }
});

// INTERFAZ DE PRUEBA MEJORADA
app.get("/test", (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="es">
    <head>
      <title>Test Mavilda Bot - Seragro</title>
      <meta charset="UTF-8">
      <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          min-height: 100vh;
          display: flex;
          justify-content: center;
          align-items: center;
          padding: 20px;
        }
        .container {
          width: 100%;
          max-width: 500px;
          background: white;
          border-radius: 20px;
          box-shadow: 0 20px 60px rgba(0,0,0,0.3);
          overflow: hidden;
        }
        .header {
          background: linear-gradient(135deg, #2ecc71 0%, #27ae60 100%);
          color: white;
          padding: 25px;
          text-align: center;
        }
        .header h1 {
          font-size: 24px;
          margin-bottom: 5px;
        }
        .header p {
          opacity: 0.9;
          font-size: 14px;
        }
        #chat {
          height: 450px;
          overflow-y: auto;
          padding: 20px;
          background: #f8f9fa;
        }
        .message {
          margin-bottom: 15px;
          animation: slideIn 0.3s ease-out;
        }
        @keyframes slideIn {
          from { opacity: 0; transform: translateY(10px); }
          to { opacity: 1; transform: translateY(0); }
        }
        .user {
          text-align: right;
        }
        .user .bubble {
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          color: white;
          display: inline-block;
          padding: 12px 18px;
          border-radius: 20px 20px 5px 20px;
          max-width: 80%;
          text-align: left;
        }
        .bot .bubble {
          background: white;
          color: #333;
          display: inline-block;
          padding: 12px 18px;
          border-radius: 20px 20px 20px 5px;
          max-width: 80%;
          box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .input-area {
          padding: 20px;
          background: white;
          border-top: 1px solid #e0e0e0;
          display: flex;
          gap: 10px;
        }
        #msg {
          flex: 1;
          padding: 12px 18px;
          border: 2px solid #e0e0e0;
          border-radius: 25px;
          font-size: 14px;
          outline: none;
          transition: border-color 0.3s;
        }
        #msg:focus {
          border-color: #667eea;
        }
        button {
          padding: 12px 25px;
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          color: white;
          border: none;
          border-radius: 25px;
          cursor: pointer;
          font-weight: 600;
          transition: transform 0.2s;
        }
        button:hover {
          transform: scale(1.05);
        }
        button:active {
          transform: scale(0.95);
        }
        .typing {
          display: inline-block;
          padding: 15px;
          background: white;
          border-radius: 20px;
          box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .typing span {
          display: inline-block;
          width: 8px;
          height: 8px;
          border-radius: 50%;
          background: #999;
          margin-right: 3px;
          animation: bounce 1.4s infinite ease-in-out;
        }
        .typing span:nth-child(1) { animation-delay: -0.32s; }
        .typing span:nth-child(2) { animation-delay: -0.16s; }
        @keyframes bounce {
          0%, 60%, 100% { transform: translateY(0); }
          30% { transform: translateY(-10px); }
        }
        .status {
          padding: 10px;
          background: #e8f5e9;
          color: #2e7d32;
          text-align: center;
          font-size: 12px;
        }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <h1>üöÅ Mavilda Bot - Seragro</h1>
          <p>Asesora en Drones Agr√≠colas DJI</p>
        </div>
        <div class="status" id="status">Conectado - Sesi√≥n de prueba</div>
        <div id="chat"></div>
        <div class="input-area">
          <input id="msg" placeholder="Escrib√≠ tu mensaje..." autocomplete="off">
          <button onclick="send()">Enviar</button>
        </div>
      </div>

      <script>
        const sessionId = 'test_' + Date.now();
        const chat = document.getElementById('chat');
        const input = document.getElementById('msg');
        let messageCount = 0;

        input.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') send();
        });

        async function send() {
          const msg = input.value.trim();
          if (!msg) return;

          // Mostrar mensaje del usuario
          chat.innerHTML += '<div class="message user"><div class="bubble">' + msg + '</div></div>';
          input.value = '';
          chat.scrollTop = chat.scrollHeight;

          // Mostrar indicador de escritura
          const typingId = 'typing_' + Date.now();
          chat.innerHTML += '<div class="message bot" id="' + typingId + '"><div class="typing"><span></span><span></span><span></span></div></div>';
          chat.scrollTop = chat.scrollHeight;

          try {
            const resp = await fetch('/process', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ message: msg, sessionId: sessionId })
            });

            const data = await resp.json();

            // Quitar indicador de escritura
            document.getElementById(typingId).remove();

            // Mostrar respuesta del bot
            const botMsg = data.response.replace(/\\n/g, '<br>');
            chat.innerHTML += '<div class="message bot"><div class="bubble">' + botMsg + '</div></div>';
            chat.scrollTop = chat.scrollHeight;

            // Actualizar estado
            messageCount++;
            document.getElementById('status').innerHTML = 
              'Mensajes: ' + messageCount + 
              (data.session.userName ? ' | Usuario: ' + data.session.userName : '') +
              (data.session.modelInterest ? ' | Inter√©s: ' + data.session.modelInterest : '');

            // Log para debug
            console.log('Sesi√≥n:', data.session);
            console.log('Necesidades:', data.needs);
            console.log('Intenci√≥n:', data.intent);

          } catch (error) {
            document.getElementById(typingId).remove();
            chat.innerHTML += '<div class="message bot"><div class="bubble">‚ùå Error: ' + error.message + '</div></div>';
          }
        }

        // Mensaje inicial autom√°tico
        window.onload = () => {
          setTimeout(() => {
            chat.innerHTML = '<div class="message bot"><div class="bubble">¬°Hola! üëã Soy Mavilda de Seragro, especialista en drones agr√≠colas DJI.<br><br>Me encantar√≠a ayudarte a mejorar la eficiencia de tu campo.<br>¬øCon qui√©n tengo el gusto de hablar?</div></div>';
          }, 500);
        };
      </script>
    </body>
    </html>
  `);
});

// HEALTH CHECK
app.get("/", (req, res) => {
  res.json({
    status: "‚úÖ Operativo",
    name: "Mavilda Bot - Seragro",
    version: "3.0 Professional",
    endpoints: {
      process: "/process - Procesar mensajes",
      test: "/test - Interfaz de prueba",
    },
    features: [
      "An√°lisis inteligente de mensajes",
      "Detecci√≥n de intenciones",
      "Respuestas contextuales",
      "Personalidad argentina natural",
      "Integraci√≥n N8N completa",
    ],
    timestamp: new Date().toLocaleString("es-AR"),
  });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`‚úÖ Mavilda Bot corriendo en puerto ${PORT}`);
  console.log(`üîó Interfaz de prueba: http://localhost:${PORT}/test`);
  console.log(`üìä Estado del sistema: http://localhost:${PORT}/`);
});
